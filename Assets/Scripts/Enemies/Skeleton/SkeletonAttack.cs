using System.Collections;
using UnityEngine;

namespace Enemies.Skeleton
{
   public class SkeletonAttack : MonoBehaviour
   {
      public GameObject slashObject;                // –ü—Ä–µ—Ñ–∞–± –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —É–¥–∞—Ä–∞
      private readonly float _slashDuration = 0.5f; // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∞ –∞—Ç–∞–∫–∏ (slash)

      [SerializeField] private AudioClip swordHitSound; // –ó–≤—É–∫ —É–¥–∞—Ä–∞ –º–µ—á–æ–º
      private AudioSource _audioSource;
      
      private EnemyStats _enemyStats;
      private PlayerStats _player;
      private Transform _enemy;
   
      void Start()
      {
         _enemyStats = GetComponent<EnemyStats>();
         _enemy = GetComponent<Transform>();
         _player = FindObjectOfType<PlayerStats>();
         _audioSource = GetComponent<AudioSource>();
         
         slashObject.SetActive(false);
      }
   
      // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –≤ —Ä–∞–¥–∏—É—Å–µ –≤—Ä–∞–≥–∞ –∏–≥—Ä–æ–∫
      public bool IsPlayerInRange(Vector3Int enemyTile, Vector3Int playerTile)
      {
         int dx = Mathf.Abs(enemyTile.x - playerTile.x);
         int dy = Mathf.Abs(enemyTile.y - playerTile.y);
         return dx <= _enemyStats.attackRange && dy <= _enemyStats.attackRange; // –ù–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –≤ —Ä–∞–¥–∏—É—Å–µ –∞—Ç–∞–∫–∏
      }
   
      public void AttackPlayer()
      {
         if (_player != null && _enemy != null)
         {
            _player.TakeDamage(_enemyStats.damage);
            StartCoroutine(PlayDoubleSwordHitSound());
            ShowSlashEffect();
         }
      }
      // üéµ –î–≤–æ–π–Ω–æ–π –∑–≤—É–∫ —É–¥–∞—Ä–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
      private IEnumerator PlayDoubleSwordHitSound()
      {
         if (swordHitSound != null && _audioSource != null)
         {
            _audioSource.PlayOneShot(swordHitSound); 
            yield return new WaitForSeconds(0.15f); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–¥–∞—Ä–∞–º–∏
            _audioSource.PlayOneShot(swordHitSound);
         }
      }
      
      // –°–ª–µ—à —ç—Ñ—Ñ–µ–∫—Ç
      private void ShowSlashEffect()
      {
         slashObject.SetActive(true);
         
         var effectPosition = _player.transform.position + new Vector3(0, 0.15f, 0); //–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
         slashObject.transform.position = effectPosition;
         
         Invoke(nameof(DeactivateSlash), _slashDuration);
      }

      // –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å–ª–µ—à —ç—Ñ—Ñ–µ–∫—Ç–∞
      private void DeactivateSlash()
      {
         slashObject.SetActive(false);  
      }
   }
}
